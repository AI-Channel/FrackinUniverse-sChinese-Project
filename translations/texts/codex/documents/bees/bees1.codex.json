[
  {
    "DeniedAlternatives": [],
    "Files": {
      "codex/documents/bees/bees1.codex": [
        "/title"
      ]
    },
    "Texts": {
      "Chs": "蜜峰基因组",
      "Eng": "Bee Genomes"
    }
  },
  {
    "DeniedAlternatives": [],
    "Files": {
      "codex/documents/bees/bees1.codex": [
        "/description"
      ]
    },
    "Texts": {
      "Chs": "如何读懂基因组",
      "Eng": "How to read genomes"
    }
  },
  {
    "DeniedAlternatives": [],
    "Files": {
      "codex/documents/bees/bees1.codex": [
        "/longContentPages/0"
      ]
    },
    "Texts": {
      "Chs": "^orange;基因组^reset;\n\n由数字和单字组成的字符串，类似于十六进制的工作方式，但最高值Z而不是F（35进制而不是15进制 | 0-1295而不是0-255的双字节）。\n\n一个基因组由统计量乘以二个字符组成，其中每两个字符存储一个统计量的值。每一对这样的字符被称为一个基因。一个统计量从统计量转化为字符串的方式各不相同，但总体思路是这样的。\n\nvalue * 100 -> char (0 = 00, 12.95 = ZZ, 2 = 5J)\n\n一个完整的基因组加上目前的统计数值会是这样的。\n\nbaseProduction（基础产量） : 3, droneToughness（工蜂韧性） : 1, droneMultiplier（工巢倍率） : 1, queenLifespan（蜂后寿命） : 5, queenHealth（蜂后健康） : 3, mutationChance（突变几率） : 1 (最高100)\n\n最后可得基因组：30101050301\n\n\n\n^orange;状态^reset;\n\n-subtype(子类) : 用于识别蜜蜂的子类。使用这个设置生产成池和其独有行为\n-baseProduction（基础产量） : ·100%蜂巢效率时工蜂的基础生产力\n-droneToughness（工蜂韧性） : 杀死一只工蜂所需的螨虫数量。也用于蜜蜂对蜜蜂的战力比较\n-droneBreedRate（工蜂繁衍率） : 工蜂的基础繁衍效率\n-queenBreedRate（蜂后繁衍率） : 蜂后的基础繁衍效率\n-queenLifespan（蜂后寿命） : 在蜂后死亡之前能产下的蜜蜂数量（至多1295）\n-mutationChance（突变几率） : 发生急剧突变的几率\n-miteResistance（螨虫抗性） : 螨虫出生率修正器 ('ZZ': 64.7, 'HZ': 0, '00': -64.7, value:modifier)\n-workTime（工作时间） : Diurnal('0'), nocturnal('1'), or both('2')\n\n-每突变一次，突变几率便以(math.floor(100/1295*100*n)*0.01) 进行跳跃\n-'00' : 0 | '01' : 0.07 | 'HZ' : 49.96 | 'ZZ' : 100\n",
      "Eng": "^orange;Genomes^reset;\n\nA string composed of numbers and chars similar to how hexidecimals work, but goes up to Z instead of F (0-35 instead of 0-15 | 0-1295 instead of 0-255 with two characters)\n\nA genome is composed of (number of stats * 2) characters, where every two characters store the value of a stat. Each such pair is called a gene. The way a stat is translated from stat to string varies, but here's the general idea:\n\nvalue * 100 -> char (0 = 00, 12.95 = ZZ, 2 = 5J)\n\nA complete genome with the present stats would look like this:\n\nbaseProduction : 3, droneToughness : 1, droneMultiplier : 1, queenLifespan : 5, queenHealth : 3, mutationChance : 1 (out of 100)\n\nFinal Genome: 30101050301\n\n\n\n^orange;Stats^reset;\n\n-subtype : Used to identify the subtype of the bee. Set up production pools and unique behaviors using this.\n-baseProduction : Base drone production at 100% hive efficiency\n-droneToughness : Number of mites required to kill a drone. Also used in bee on bee fights\n-droneBreedRate : Base drone breeding rate\n-queenBreedRate : Base queen breeding rate\n-queenLifespan : How many bee production ticks before the queen dies (up to 1295)\n-mutationChance : Chance for a drastic mutation to occur\n-miteResistance : Mite birth rate modifier ('ZZ': 64.7, 'HZ': 0, '00': -64.7, value:modifier)\n-workTime : Diurnal('0'), nocturnal('1'), or both('2')\n\n-Mutation chance jumps by (math.floor(100/1295*100*n)*0.01) each increment\n-'00' : 0 | '01' : 0.07 | 'HZ' : 49.96 | 'ZZ' : 100\n"
    }
  }
]